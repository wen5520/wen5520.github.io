(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{195:function(n,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var n=this,t=n._self._c;return t("div",{staticClass:"content"},[n._m(0),n._v(" "),n._m(1),n._v(" "),t("p",[t("a",{attrs:{href:"https://www.runoob.com/w3cnote/js-call-apply-bind.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("call,apply,bind"),t("OutboundLink")],1),n._v("\n其实是一个很简单的东西，认真看十分钟就从一脸懵B 到完全 理解！")]),n._v(" "),t("p",[n._v("先看明白下面：")]),n._v(" "),t("p",[n._v("例 1")]),n._v(" "),n._m(2),t("p",[n._v("例 2")]),n._v(" "),t("p",[n._v("shows()  // 盲僧　\n比较一下这两者 this 的差别，第一个打印里面的 this 指向 obj，第二个全局声明的 shows() 函数 this 是 window ；")]),n._v(" "),t("p",[n._v("1，call()、apply()、bind() 都是用来重定义 this 这个对象的！")]),n._v(" "),t("p",[n._v("如：")]),n._v(" "),t("p",[n._v("obj.myFun.call(db)；　　　　// 德玛年龄 99\nobj.myFun.apply(db);　　　 // 德玛年龄 99\nobj.myFun.bind(db)();　　　// 德玛年龄 99\n以上出了 bind 方法后面多了个 () 外 ，结果返回都一致！")]),n._v(" "),t("p",[n._v("由此得出结论，bind 返回的是一个新的函数，你必须调用它才会被执行。")]),n._v(" "),t("p",[n._v("2，对比call 、bind 、 apply 传参情况下")]),n._v(" "),n._m(3),n._v(" "),t("p",[n._v("从上面四个结果不难看出:")]),n._v(" "),t("p",[n._v("call 、bind 、 apply 这三个函数的第一个参数都是 this 的指向对象，第二个参数差别就来了：")]),n._v(" "),t("p",[n._v("call 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 obj.myFun.call(db,'成都', ... ,'string' )。")]),n._v(" "),t("p",[n._v("apply 的所有参数都必须放在一个数组里面传进去 obj.myFun.apply(db,['成都', ..., 'string' ])。")]),n._v(" "),t("p",[n._v("bind 除了返回是函数以外，它 的参数和 call 一样。")]),n._v(" "),t("p",[n._v("当然，三者的参数不限定是 string 类型，允许是各种类型，包括函数 、 object 等等！")]),n._v(" "),n._m(4),n._v(" "),n._m(5),n._v(" "),t("p",[t("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments",target:"_blank",rel:"noopener noreferrer"}},[n._v("arguments"),t("OutboundLink")],1)]),n._v(" "),n._m(6)])}),[function(){var n=this._self._c;return n("h3",{attrs:{id:"杂堆"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#杂堆"}},[this._v("#")]),this._v(" 杂堆")])},function(){var n=this._self._c;return n("h4",{attrs:{id:"javascript-中-call-、apply-、bind-的用法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#javascript-中-call-、apply-、bind-的用法"}},[this._v("#")]),this._v(" JavaScript 中 call()、apply()、bind() 的用法")])},function(){var n=this,t=n._self._c;return t("div",{staticClass:"language-js line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-js"}},[t("code",[n._v("obj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),n._v("objAge"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(";")]),n._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 17")]),n._v("\nobj"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[n._v("myFun")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v(")")]),n._v("  "),t("span",{pre:!0,attrs:{class:"token comment"}},[n._v("// 小张年龄 undefined")]),n._v("\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])])},function(){var n=this._self._c;return n("p",[this._v("obj.myFun.call(db,'成都','上海')；　　　　 // 德玛 年龄 99  来自 成都去往上海\nobj.myFun.apply(db,['成都','上海']);      // 德玛 年龄 99  来自 成都去往上海"),n("br"),this._v("\nobj.myFun.bind(db,'成都','上海')();       // 德玛 年龄 99  来自 成都去往上海\nobj.myFun.bind(db,['成都','上海'])();　　 // 德玛 年龄 99  来自 成都, 上海去往 undefined　　\n微妙的差距！")])},function(){var n=this._self._c;return n("ol",[n("li",[this._v("apply()方法能劫持另外一个对象的方法，继承另外一个对象的属性\n2.Function.apply(obj,args)方法能接收两个参数\n3.obj：这个对象将代替Function类里this对象\n4.args：这个是数组，它将作为参数传给Function（args–>arguments）")])])},function(){var n=this._self._c;return n("h4",{attrs:{id:"arguments-对象"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arguments-对象"}},[this._v("#")]),this._v(" Arguments 对象")])},function(){var n=this._self._c;return n("h4",{attrs:{id:"视频aes加密，aes定制化加密"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#视频aes加密，aes定制化加密"}},[this._v("#")]),this._v(" 视频AES加密，AES定制化加密")])}],!1,null,null,null);t.default=r.exports}}]);